const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');


app.put('/api/transactions/:id', async (req, res) => {
const { id } = req.params;
const { quantity, costPrice, sellingPrice } = req.body;
const client = await pool.connect();

try {
await client.query('BEGIN');

const transactionRes = await client.query('SELECT * FROM transactions WHERE id = $1', [id]);
const originalTransaction = transactionRes.rows[0];

if (!originalTransaction) {
throw new Error('Transaksi tidak ditemukan.');
}

const quantityDifference = quantity - originalTransaction.quantity;

const productRes = await client.query('SELECT * FROM products WHERE name = $1', [originalTransaction.productName]);
const product = productRes.rows[0];

if (!product) {
throw new Error('Produk tidak ditemukan.');
}
if (product.stock < quantityDifference) {
throw new Error('Stok tidak mencukupi untuk pembaruan ini.');
}

const newStock = product.stock - quantityDifference;
await client.query('UPDATE products SET stock = $1 WHERE name = $2', [newStock, originalTransaction.productName]);

const newTotal = quantity * sellingPrice;
const newProfitPerUnit = sellingPrice - costPrice;
await client.query(
'UPDATE transactions SET quantity = $1, costPrice = $2, sellingPrice = $3, total = $4, profitPerUnit = $5 WHERE id = $6',
[quantity, costPrice, sellingPrice, newTotal, newProfitPerUnit, id]
);

await client.query('COMMIT');
res.json({ message: 'Transaksi berhasil diperbarui.' });
} catch (err) {
await client.query('ROLLBACK');
res.status(400).json({ error: err.message });
} finally {
client.release();
}
});

costPrice NUMERIC NOT NULL,
// PRODUCTS APIrice NUMERIC NOT NULL,
app.post('/api/products', async (req, res) => {
const { name, stock, price, costPrice } = req.body;
try {te DATE
const result = await pool.query(
'INSERT INTO products (name, stock, price, costPrice) VALUES ($1, $2, $3, $4) RETURNING id',
[name, stock, price, costPrice]
); more ...
res.status(201).json({ id: result.rows[0].id });
} catch (err) {
res.status(400).json({ error: err.message });
}mplate web\template-web-app (main*)                                                       no sandbox (see /docs)                                                        gemini-2.5-pro (98% context left)
});

app.get('/api/products', async (req, res) => {
const { search } = req.query;
let sql = `SELECT * FROM products`;
let params = [];
if (search) {
sql += ` WHERE name ILIKE $1`; // ILIKE for case-insensitive search in PostgreSQL
params.push(`%${search}%`);
}
sql += ` ORDER BY name ASC`;
try {
const { rows } = await pool.query(sql, params);
res.json(rows);
} catch (err) {
res.status(400).json({ error: err.message });
}
});

app.put('/api/products/:id', async (req, res) => {
const { id } = req.params;
const { stock } = req.body;
try {
const result = await pool.query('UPDATE products SET stock = $1 WHERE id = $2', [stock, id]);
if (result.rowCount === 0) {
res.status(404).json({ error: 'Product not found.' });
} else {
res.json({ message: 'Product stock updated successfully.' });
}
} catch (err) {
res.status(400).json({ error: err.message });
}
});

app.delete('/api/products/:id', async (req, res) => {
const { id } = req.params;
try {
const productRes = await pool.query('SELECT name FROM products WHERE id = $1', [id]);
if (productRes.rowCount === 0) {
return res.status(404).json({ error: 'Produk tidak ditemukan.' });
}

const productName = productRes.rows[0].name;
const transactionCheck = await pool.query('SELECT 1 FROM transactions WHERE productName = $1 LIMIT 1', [productName]);

if (transactionCheck.rowCount > 0) {
return res.status(400).json({ error: 'Tidak dapat menghapus produk karena sudah ada transaksi terkait.' });
}

const deleteRes = await pool.query('DELETE FROM products WHERE id = $1', [id]);
if (deleteRes.rowCount === 0) {
return res.status(404).json({ error: 'Gagal menghapus produk.' });
}
res.json({ message: 'Produk berhasil dihapus.' });
} catch (err) {
res.status(500).json({ error: err.message });
}
});


// EXPENSES API
app.post('/api/expenses', async (req, res) => {
const { description, amount } = req.body;
const date = getLocalDate();
const client = await pool.connect();
try {
await client.query('BEGIN');
const expenseRes = await client.query(
'INSERT INTO expenses (description, amount, date) VALUES ($1, $2, $3) RETURNING id',
[description, amount, date]
);
await client.query(
'INSERT INTO capital_history (amount, date, type) VALUES ($1, $2, $3)',
[amount, date, 'subtract']
);
await client.query('COMMIT');
res.status(201).json({ id: expenseRes.rows[0].id });
} catch (err) {
await client.query('ROLLBACK');
res.status(400).json({ error: err.message });
} finally {
client.release();
}
});

app.get('/api/expenses', async (req, res) => {
const { startDate, endDate } = req.query;
let sql = `SELECT * FROM expenses`;
const params = [];
if (startDate && endDate) {
sql += ' WHERE date BETWEEN $1 AND $2';
params.push(startDate, endDate);
}
sql += ' ORDER BY date DESC, id DESC';
try {
const { rows } = await pool.query(sql, params);
res.json(rows);
} catch (err) {
res.status(400).json({ error: err.message });
}
});

app.put('/api/expenses/:id', async (req, res) => {
const { id } = req.params;
const { description, amount } = req.body;
const client = await pool.connect();
try {
await client.query('BEGIN');

const expenseRes = await client.query('SELECT * FROM expenses WHERE id = $1', [id]);
const originalExpense = expenseRes.rows[0];
if (!originalExpense) {
throw new Error('Expense not found.');
}

// Restore old capital amount
await client.query('INSERT INTO capital_history (amount, date, type) VALUES ($1, $2, $3)', [originalExpense.amount, originalExpense.date, 'add']);
// Subtract new capital amount
await client.query('INSERT INTO capital_history (amount, date, type) VALUES ($1, $2, $3)', [amount, originalExpense.date, 'subtract']);

await client.query('UPDATE expenses SET description = $1, amount = $2 WHERE id = $3', [description, amount, id]);

await client.query('COMMIT');
res.json({ message: 'Expense updated successfully.' });
} catch (err) {
await client.query('ROLLBACK');
res.status(400).json({ error: err.message });
} finally {
client.release();
}
});

app.delete('/api/expenses/:id', async (req, res) => {
const { id } = req.params;
const client = await pool.connect();
try {
await client.query('BEGIN');

const expenseRes = await client.query('SELECT * FROM expenses WHERE id = $1', [id]);
const expense = expenseRes.rows[0];
if (!expense) {
throw new Error('Expense not found.');
}

await client.query('INSERT INTO capital_history (amount, date, type) VALUES ($1, $2, $3)', [expense.amount, expense.date, 'add']);

const deleteRes = await client.query('DELETE FROM expenses WHERE id = $1', [id]);
if (deleteRes.rowCount === 0) {
throw new Error('Failed to delete expense.');
}

await client.query('COMMIT');
res.json({ message: 'Expense deleted successfully and capital restored.' });
} catch (err) {
await client.query('ROLLBACK');
res.status(400).json({ error: err.message });
} finally {
client.release();
}
});


// CAPITAL API
app.post('/api/capital', async (req, res) => {
const { amount, type } = req.body;
const date = getLocalDate();
try {
const result = await pool.query(
'INSERT INTO capital_history (amount, date, type) VALUES ($1, $2, $3) RETURNING id',
[amount, date, type]
);
res.status(201).json({ id: result.rows[0].id });
} catch (err) {
res.status(400).json({ error: err.message });
}
});

app.get('/api/capital/total', async (req, res) => {
try {
const { rows } = await pool.query(`SELECT SUM(CASE WHEN type = 'add' THEN amount ELSE -amount END) AS totalCapital FROM capital_history`);
const totalCapital = rows[0].totalcapital || 0;
res.json({ totalCapital });
} catch (err) {
res.status(400).json({ error: err.message });
}
});


// Export aplikasi Express untuk Vercel
module.exports = app;

kah 3: Buat File Konfigurasi Vercel

khir, kita perlu memberitahu Vercel cara menangani proyek ini.

Kembali ke direktori utama backend Anda (C:\...\backend).
Buat sebuah file baru di sini (di level yang sama dengan folder api).
Beri nama file tersebut vercel.json.
Buka file vercel.json dan isi dengan konten berikut:

{
"version": 2,
"builds": [
{
"src": "api/index.js",
"use": "@vercel/node"
}
],
"routes": [
{
"src": "/(.*)",
"dest": "/api/index.js"
}
]
}
